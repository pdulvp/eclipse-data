/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.pdulvp.data.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.pdulvp.data.util.DataAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * @generated
 */
public class DataItemProviderAdapterFactory extends DataAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement
	 * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
   * @generated
   */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	public DataItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Category} instances.
   * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
   * @generated
   */
	protected CategoryItemProvider categoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.pdulvp.data.Category}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCategoryAdapter() {
    if (categoryItemProvider == null) {
      categoryItemProvider = new CategoryItemProvider(this);
    }

    return categoryItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Item} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ItemItemProvider itemItemProvider;

	/**
   * This creates an adapter for a {@link org.pdulvp.data.Item}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createItemAdapter() {
    if (itemItemProvider == null) {
      itemItemProvider = new ItemItemProvider(this);
    }

    return itemItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.ItemRoot} instances.
   * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
   * @generated
   */
	protected ItemRootItemProvider itemRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.pdulvp.data.ItemRoot}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createItemRootAdapter() {
    if (itemRootItemProvider == null) {
      itemRootItemProvider = new ItemRootItemProvider(this);
    }

    return itemRootItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.ItemPkg} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ItemPkgItemProvider itemPkgItemProvider;

	/**
   * This creates an adapter for a {@link org.pdulvp.data.ItemPkg}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createItemPkgAdapter() {
    if (itemPkgItemProvider == null) {
      itemPkgItemProvider = new ItemPkgItemProvider(this);
    }

    return itemPkgItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.ScreenPkg} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScreenPkgItemProvider screenPkgItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.ScreenPkg}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createScreenPkgAdapter() {
    if (screenPkgItemProvider == null) {
      screenPkgItemProvider = new ScreenPkgItemProvider(this);
    }

    return screenPkgItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.CategoryPkg} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CategoryPkgItemProvider categoryPkgItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.CategoryPkg}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCategoryPkgAdapter() {
    if (categoryPkgItemProvider == null) {
      categoryPkgItemProvider = new CategoryPkgItemProvider(this);
    }

    return categoryPkgItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.ProductPkg} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProductPkgItemProvider productPkgItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.ProductPkg}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProductPkgAdapter() {
    if (productPkgItemProvider == null) {
      productPkgItemProvider = new ProductPkgItemProvider(this);
    }

    return productPkgItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.ItemTypePkg} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ItemTypePkgItemProvider itemTypePkgItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.ItemTypePkg}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createItemTypePkgAdapter() {
    if (itemTypePkgItemProvider == null) {
      itemTypePkgItemProvider = new ItemTypePkgItemProvider(this);
    }

    return itemTypePkgItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Timestamp} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected TimestampItemProvider timestampItemProvider;

	/**
   * This creates an adapter for a {@link org.pdulvp.data.Timestamp}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createTimestampAdapter() {
    if (timestampItemProvider == null) {
      timestampItemProvider = new TimestampItemProvider(this);
    }

    return timestampItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Screen} instances.
   * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
   * @generated
   */
	protected ScreenItemProvider screenItemProvider;

	/**
	 * This creates an adapter for a {@link org.pdulvp.data.Screen}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createScreenAdapter() {
    if (screenItemProvider == null) {
      screenItemProvider = new ScreenItemProvider(this);
    }

    return screenItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.ScreenList} instances.
   * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
   * @generated
   */
	protected ScreenListItemProvider screenListItemProvider;

	/**
	 * This creates an adapter for a {@link org.pdulvp.data.ScreenList}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createScreenListAdapter() {
    if (screenListItemProvider == null) {
      screenListItemProvider = new ScreenListItemProvider(this);
    }

    return screenListItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.User} instances.
   * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
   * @generated
   */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link org.pdulvp.data.User}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
    if (userItemProvider == null) {
      userItemProvider = new UserItemProvider(this);
    }

    return userItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.OAuthToken} instances.
   * <!-- begin-user-doc --> <!--
	 * end-user-doc -->
   * @generated
   */
	protected OAuthTokenItemProvider oAuthTokenItemProvider;

	/**
	 * This creates an adapter for a {@link org.pdulvp.data.OAuthToken}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createOAuthTokenAdapter() {
    if (oAuthTokenItemProvider == null) {
      oAuthTokenItemProvider = new OAuthTokenItemProvider(this);
    }

    return oAuthTokenItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.ItemType} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected ItemTypeItemProvider itemTypeItemProvider;

	/**
   * This creates an adapter for a {@link org.pdulvp.data.ItemType}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createItemTypeAdapter() {
    if (itemTypeItemProvider == null) {
      itemTypeItemProvider = new ItemTypeItemProvider(this);
    }

    return itemTypeItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Metadatas} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected MetadatasItemProvider metadatasItemProvider;

	/**
   * This creates an adapter for a {@link org.pdulvp.data.Metadatas}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createMetadatasAdapter() {
    if (metadatasItemProvider == null) {
      metadatasItemProvider = new MetadatasItemProvider(this);
    }

    return metadatasItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.HomeItem} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HomeItemItemProvider homeItemItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.HomeItem}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHomeItemAdapter() {
    if (homeItemItemProvider == null) {
      homeItemItemProvider = new HomeItemItemProvider(this);
    }

    return homeItemItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Application} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ApplicationItemProvider applicationItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.Application}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createApplicationAdapter() {
    if (applicationItemProvider == null) {
      applicationItemProvider = new ApplicationItemProvider(this);
    }

    return applicationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.SchemaPkg} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SchemaPkgItemProvider schemaPkgItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.SchemaPkg}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSchemaPkgAdapter() {
    if (schemaPkgItemProvider == null) {
      schemaPkgItemProvider = new SchemaPkgItemProvider(this);
    }

    return schemaPkgItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Product} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProductItemProvider productItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.Product}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProductAdapter() {
    if (productItemProvider == null) {
      productItemProvider = new ProductItemProvider(this);
    }

    return productItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Schema} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SchemaItemProvider schemaItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.Schema}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSchemaAdapter() {
    if (schemaItemProvider == null) {
      schemaItemProvider = new SchemaItemProvider(this);
    }

    return schemaItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.SchemaClass} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SchemaClassItemProvider schemaClassItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.SchemaClass}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSchemaClassAdapter() {
    if (schemaClassItemProvider == null) {
      schemaClassItemProvider = new SchemaClassItemProvider(this);
    }

    return schemaClassItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.SchemaFeature} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SchemaFeatureItemProvider schemaFeatureItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.SchemaFeature}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSchemaFeatureAdapter() {
    if (schemaFeatureItemProvider == null) {
      schemaFeatureItemProvider = new SchemaFeatureItemProvider(this);
    }

    return schemaFeatureItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.RequestPkg} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequestPkgItemProvider requestPkgItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.RequestPkg}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRequestPkgAdapter() {
    if (requestPkgItemProvider == null) {
      requestPkgItemProvider = new RequestPkgItemProvider(this);
    }

    return requestPkgItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Request} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequestItemProvider requestItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.Request}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRequestAdapter() {
    if (requestItemProvider == null) {
      requestItemProvider = new RequestItemProvider(this);
    }

    return requestItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.JobPkg} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JobPkgItemProvider jobPkgItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.JobPkg}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJobPkgAdapter() {
    if (jobPkgItemProvider == null) {
      jobPkgItemProvider = new JobPkgItemProvider(this);
    }

    return jobPkgItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Job} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected JobItemProvider jobItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.Job}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createJobAdapter() {
    if (jobItemProvider == null) {
      jobItemProvider = new JobItemProvider(this);
    }

    return jobItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.Trigger} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriggerItemProvider triggerItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.Trigger}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTriggerAdapter() {
    if (triggerItemProvider == null) {
      triggerItemProvider = new TriggerItemProvider(this);
    }

    return triggerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.ItemProduct} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ItemProductItemProvider itemProductItemProvider;

  /**
   * This creates an adapter for a {@link org.pdulvp.data.ItemProduct}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createItemProductAdapter() {
    if (itemProductItemProvider == null) {
      itemProductItemProvider = new ItemProductItemProvider(this);
    }

    return itemProductItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.CategoryView} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected CategoryViewItemProvider categoryViewItemProvider;

	/**
	 * This creates an adapter for a {@link org.pdulvp.data.CategoryView}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createCategoryViewAdapter() {
    if (categoryViewItemProvider == null) {
      categoryViewItemProvider = new CategoryViewItemProvider(this);
    }

    return categoryViewItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.HomeScreenList} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected HomeScreenListItemProvider homeScreenListItemProvider;

	/**
	 * This creates an adapter for a {@link org.pdulvp.data.HomeScreenList}. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createHomeScreenListAdapter() {
    if (homeScreenListItemProvider == null) {
      homeScreenListItemProvider = new HomeScreenListItemProvider(this);
    }

    return homeScreenListItemProvider;
  }

	/**
   * This keeps track of the one adapter used for all {@link org.pdulvp.data.FavouriteItemsView} instances.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	protected FavouriteItemsViewItemProvider favouriteItemsViewItemProvider;

	/**
   * This creates an adapter for a {@link org.pdulvp.data.FavouriteItemsView}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createFavouriteItemsViewAdapter() {
    if (favouriteItemsViewItemProvider == null) {
      favouriteItemsViewItemProvider = new FavouriteItemsViewItemProvider(this);
    }

    return favouriteItemsViewItemProvider;
  }

	/**
	 * This keeps track of the one adapter used for all
	 * {@link org.pdulvp.data.FavouriteCategoriesView} instances. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected FavouriteCategoriesViewItemProvider favouriteCategoriesViewItemProvider;

	/**
   * This creates an adapter for a {@link org.pdulvp.data.FavouriteCategoriesView}.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter createFavouriteCategoriesViewAdapter() {
    if (favouriteCategoriesViewItemProvider == null) {
      favouriteCategoriesViewItemProvider = new FavouriteCategoriesViewItemProvider(this);
    }

    return favouriteCategoriesViewItemProvider;
  }

	/**
	 * This returns the root adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

	/**
	 * This sets the composed adapter factory that contains this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

	/**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
	@Override
	public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

	/**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

	/**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
	@Override
	public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

	/**
   * This adds a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

	/**
   * This removes a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

	/**
	 * This delegates to {@link #changeNotifier} and to
	 * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
	 * -->
	 * 
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

	/**
	 * This disposes all of the item providers created by this factory. <!--
	 * begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void dispose() {
    if (itemRootItemProvider != null) itemRootItemProvider.dispose();
    if (itemPkgItemProvider != null) itemPkgItemProvider.dispose();
    if (screenPkgItemProvider != null) screenPkgItemProvider.dispose();
    if (categoryPkgItemProvider != null) categoryPkgItemProvider.dispose();
    if (itemTypePkgItemProvider != null) itemTypePkgItemProvider.dispose();
    if (timestampItemProvider != null) timestampItemProvider.dispose();
    if (categoryItemProvider != null) categoryItemProvider.dispose();
    if (itemItemProvider != null) itemItemProvider.dispose();
    if (homeItemItemProvider != null) homeItemItemProvider.dispose();
    if (screenItemProvider != null) screenItemProvider.dispose();
    if (userItemProvider != null) userItemProvider.dispose();
    if (screenListItemProvider != null) screenListItemProvider.dispose();
    if (homeScreenListItemProvider != null) homeScreenListItemProvider.dispose();
    if (categoryViewItemProvider != null) categoryViewItemProvider.dispose();
    if (favouriteItemsViewItemProvider != null) favouriteItemsViewItemProvider.dispose();
    if (favouriteCategoriesViewItemProvider != null) favouriteCategoriesViewItemProvider.dispose();
    if (itemTypeItemProvider != null) itemTypeItemProvider.dispose();
    if (metadatasItemProvider != null) metadatasItemProvider.dispose();
    if (productPkgItemProvider != null) productPkgItemProvider.dispose();
    if (productItemProvider != null) productItemProvider.dispose();
    if (itemProductItemProvider != null) itemProductItemProvider.dispose();
    if (oAuthTokenItemProvider != null) oAuthTokenItemProvider.dispose();
    if (applicationItemProvider != null) applicationItemProvider.dispose();
    if (schemaPkgItemProvider != null) schemaPkgItemProvider.dispose();
    if (schemaItemProvider != null) schemaItemProvider.dispose();
    if (schemaClassItemProvider != null) schemaClassItemProvider.dispose();
    if (schemaFeatureItemProvider != null) schemaFeatureItemProvider.dispose();
    if (requestPkgItemProvider != null) requestPkgItemProvider.dispose();
    if (requestItemProvider != null) requestItemProvider.dispose();
    if (jobPkgItemProvider != null) jobPkgItemProvider.dispose();
    if (jobItemProvider != null) jobItemProvider.dispose();
    if (triggerItemProvider != null) triggerItemProvider.dispose();
  }

}
